/**
 * Function to detect what is the current season
 * 
 * @returns {String} season name
*/
function _getSeason() {
	// Get current date
	const currentDate = new Date();
	// Get current month (+ 1 'cause everything starts from 0 in programming)
	const month = currentDate.getMonth() + 1;

	// Debug
	// console.log(`Month: ${month}`);

	if (month >= 3 && month <= 5) { // Spring
		return 'Spring';
	} else if (month >= 6 && month <= 8) { // Summer
		return 'Summer';
	} else if (month >= 9 && month <= 11) { // Autumn
		return 'Autumn';
	} else { // Winter
		return 'Winter';
	}
}
// ISN'T WORKING IN TAMPERMONKEY DUE IT NEEDS TO CONNECT TO PAGE PROGRAMMATICALLY

/**
 * Function which takes an url to the image and makes image as Base64 code
 * 
 * @param {String} imageUrl - url to image
 * @param {Function} callback
*/

function _imageToBase64(imageUrl, callback) {
	// Create a new canvas element
	var canvas = document.createElement('canvas');
	// Obtain a 2D rendering context for the canvas
	var ctx = canvas.getContext('2d');
	// Create a new Image object
	var img = new Image();
	// Allow loading of cross-origin images without tainted canvas
	img.crossOrigin = 'Anonymous';

	// Define an onload event handler for the image
	img.onload = function () {
		// Set the width of the canvas to match the width of the image
		canvas.width = img.width;
		// Set the height of the canvas to match the height of the image
		canvas.height = img.height;
		// Draw the image onto the canvas at coordinates (0, 0)
		ctx.drawImage(img, 0, 0);
		// Convert the canvas content to a data URL representing the image
		var dataURL = canvas.toDataURL();
		// Invoke the callback function with the data URL as an argument
		callback(dataURL);
	};

	// Set the source URL of the image to the provided imageUrl
	img.src = imageUrl;
}
(function () {
	/**
	 * Replaces the visual representation of a checkbox in the DOM with a custom SVG checkbox and preserves the checkbox's text content 
	*/
	function replaceEntranceCheckbox() {
		// Old checkbox visuals
		const checkboxVisuals = document.querySelector('.EntranceComponentStyle-checkbox > .CheckBoxStyle-checkbox > label > span');
		// Checkbox text that should be inside the label
		const checkboxText = document.querySelector('.EntranceComponentStyle-checkbox > span');

		// New checkbox visuals
		const newCheckboxVisuals = `<svg class="checkbox-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 22 22"><rect width="21" height="21" x=".5" y=".5" fill="#ffffff" stroke="#006F94" rx="3" /><path class="tick" stroke="#6EA340" fill="none" stroke-linecap="round" stroke-width="4" d="M4 10l5 5 9-9" /></svg><span class="checkbox-text">${checkboxText.textContent}</span>`;

		// Replace old checkbox visuals with the new one
		checkboxVisuals.outerHTML = newCheckboxVisuals;

		// Remove checkboxText element
		checkboxText.remove();
	}

	/**
	 * Create a new instance of MutationObserver with a callback function
	 * to observe changes in the DOM 
	*/
	const observer = new MutationObserver(function (mutations) {
		mutations.forEach(function (mutation) {
			if (mutation.type === 'childList') { // If the change is of type childList
				mutation.addedNodes.forEach(function (node) { // Iterate through added nodes
					if (node.nodeType === Node.ELEMENT_NODE) { // If it's an element node
						// Find an element with the needed selector in the added node
						const entrance = node.querySelector(`.EntranceComponentStyle-checkbox > .CheckBoxStyle-checkbox > label > input`);
						if (entrance) { // If found
							replaceEntranceCheckbox();
						}
					}
				});
			}
		});
	});

	// Configuration for the mutation observer
	const observerConfig = { childList: true, subtree: true };

	// Start observing mutations in the document body
	observer.observe(document.body, observerConfig);
})();
(function () {
	// An object named SVGs, where keys are link parts and values are SVG strings
	var SVGs = {
		'tanki_online': `<svg class="item-icon" width="256" height="248" viewBox="0 0 256 248" xmlns="http://www.w3.org/2000/svg"><path d="M189.387 37.2267L151.677 112.647L141.438 106.248L163.434 18.2646L189.387 37.2267Z"/><path d="M152.48 127.3C153.465 127.915 154.368 128.628 155.18 129.422C156.418 130.631 157.445 132.027 158.228 133.55C159.248 135.533 159.856 137.732 159.977 140.014C159.992 140.298 160 140.582 160 140.868V148.133C159.988 149.908 158.117 151.058 156.527 150.262L112.001 128.001L111.999 115.999C111.999 113.822 113.738 112.052 115.902 112H123.411C126.41 112 129.348 112.843 131.891 114.432L152.48 127.3Z"/><path d="M81.3518 112.676L93.3088 104.704C97.9085 101.637 103.313 100 108.842 100H123.411C126.985 100 130.51 100.684 133.8 101.999L143.594 4.06108C132.782 -1.98301 119.317 -1.28056 109.122 6.16845L13.2415 76.2222C1.98472 84.4468 -2.72557 99.0252 1.57413 112.333L38.1972 225.682C42.4969 238.99 54.8286 248 68.7427 248H187.257C201.171 248 213.503 238.99 217.803 225.682L246.611 136.522L184 140L254.323 112.652L254.426 112.333C257.621 102.444 255.841 91.8535 250.096 83.6898L170.922 133.173C171.629 135.644 172 138.231 172 140.868V148H175.072C177.514 148 179.923 148.559 182.115 149.633L201.476 159.124C213.977 165.252 220.077 179.633 215.794 192.88L207.224 219.384C204.022 229.289 194.798 236 184.388 236H162.898C159.541 236 156.21 235.396 153.066 234.217L125.824 224H114.486C109.366 231.351 100.874 236 91.505 236H68.7034C60.0255 236 52.3377 230.404 49.6711 222.146L34.4584 175.035C31.9859 167.378 35.5842 159.076 42.8625 155.646L67.9999 143.797V128L18.3238 105.073C16.9072 104.419 16 103.001 16 101.441V90.4721C16 88.957 16.856 87.572 18.2111 86.8944L22.2111 84.8944C23.3373 84.3314 24.6627 84.3314 25.7889 84.8944L81.3518 112.676Z"/><path d="M80 144L80.0022 147.147C80.0026 147.762 80.3548 148.322 80.9085 148.588L82.7203 149.46C85.8637 150.972 87.6647 154.347 87.1714 157.8L80.7543 202.72C80.2647 206.147 78.6766 209.323 76.2284 211.771L66.0476 221.951C65.5925 222.407 65.6054 223.056 65.921 223.501C66.794 223.825 67.7332 224 68.7034 224H91.505C93.8921 224 96.1797 223.472 98.2412 222.514C102.52 220.526 105.825 216.688 107.027 211.881L116.642 173.431C118.512 165.705 114.424 157.769 107.033 154.812L80 144Z"/><path d="M168.064 224H184.388C189.593 224 194.205 220.644 195.806 215.692L204.376 189.188C206.823 181.619 203.338 173.401 196.194 169.899L176.833 160.408C176.566 160.278 176.287 160.177 176 160.109V163.01C176 163.616 176.342 164.17 176.884 164.441L177.794 164.896C181.355 166.677 183.065 170.804 181.806 174.581L168.597 214.207C168.204 215.386 167.543 216.456 166.665 217.334L162.049 221.951C161.293 222.706 161.828 223.999 162.897 223.999H168L168.064 224Z"/><path d="M163.158 120.447C164.781 121.97 166.207 123.672 167.414 125.513L232.398 68.6521L218.333 58.3758L163.158 120.447Z"/><path d="M128 160L160.732 173.093C164.772 174.708 166.779 179.256 165.252 183.329L157.947 202.809C156.776 205.931 153.791 208 150.456 208H120L128 176C129.314 170.747 129.314 165.252 128 160Z"/></svg>`,
		'vk': `<svg class="item-icon" width="48" height="48" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0_14426_51602)"><path fill-rule="evenodd" clip-rule="evenodd" d="M3.37413 3.37413C0 6.74826 0 12.1788 0 23.04V24.96C0 35.8212 0 41.2517 3.37413 44.6259C6.74826 48 12.1788 48 23.04 48H24.96C35.8212 48 41.2517 48 44.6259 44.6259C48 41.2517 48 35.8212 48 24.96V23.04C48 12.1788 48 6.74826 44.6259 3.37413C41.2517 0 35.8212 0 24.96 0H23.04C12.1788 0 6.74826 0 3.37413 3.37413ZM8.10059 14.5996C8.36059 27.0796 14.6005 34.5796 25.5405 34.5796H26.1607V27.4396C30.1807 27.8396 33.2204 30.7796 34.4404 34.5796H40.1206C38.5606 28.8996 34.4604 25.7596 31.9004 24.5596C34.4604 23.0796 38.0604 19.4796 38.9204 14.5996H33.7603C32.6403 18.5596 29.3207 22.1596 26.1607 22.4996V14.5996H21.0005V28.4396C17.8005 27.6396 13.7606 23.7596 13.5806 14.5996H8.10059Z"/></g><defs><clipPath id="clip0_14426_51602"><rect width="48" height="48"/></clipPath></defs></svg>`,
		'google': `<svg class="item-icon" width="48" height="48" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0_11467_48483)"><path d="M47.4898 24.54C47.4898 22.96 47.3498 21.46 47.1098 20H24.5098V29.02H37.4498C36.8698 31.98 35.1698 34.48 32.6498 36.18V42.18H40.3698C44.8898 38 47.4898 31.84 47.4898 24.54Z"/><path d="M24.5098 48.0001C30.9898 48.0001 36.4098 45.8401 40.3698 42.1801L32.6498 36.1801C30.4898 37.6201 27.7498 38.5001 24.5098 38.5001C18.2498 38.5001 12.9498 34.2801 11.0498 28.5801H3.08984V34.7601C7.02984 42.6001 15.1298 48.0001 24.5098 48.0001Z"/><path d="M11.0498 28.5802C10.5498 27.1402 10.2898 25.6002 10.2898 24.0002C10.2898 22.4002 10.5698 20.8602 11.0498 19.4202V13.2402H3.08976C1.44976 16.4802 0.509766 20.1202 0.509766 24.0002C0.509766 27.8802 1.44976 31.5202 3.08976 34.7602L11.0498 28.5802Z"/><path d="M24.5098 9.5C28.0498 9.5 31.2098 10.72 33.7098 13.1L40.5498 6.26C36.4098 2.38 30.9898 0 24.5098 0C15.1298 0 7.02984 5.40001 3.08984 13.24L11.0498 19.42C12.9498 13.72 18.2498 9.5 24.5098 9.5Z"/></g><defs><clipPath id="clip0_11467_48483"><rect width="48" height="48"/></clipPath></defs></svg>`,
		'create_account': `<svg class="item-icon" width="48" height="48" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg"><path d="M19.5 0H28.5V19.5H48V28.5L0 28.5V19.5H19.5V0Z"/><path d="M19.5003 37.5001L28.5003 28.5001V48.0001L19.5003 48.0001V37.5001Z"/></svg>`,
		'authorization': `<svg class="item-icon" width="48" height="48" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M4 0C1.79086 0 0 1.79086 0 4V21H30L15 6H24L42 24L24 42H15L30 27H0V44C0 46.2091 1.79086 48 4 48H44C46.2091 48 48 46.2091 48 44V4C48 1.79086 46.2091 0 44 0H4Z"/></svg>`,
	};

	/**
	 * Function to replace entrance icons in buttons with SVG icons (big circles, center)
	*/
	function replaceEntranceIcons() {
		// Select all buttons
		const buttons = document.querySelectorAll('.MainEntranceComponentStyle-container > div');

		// Iterate over each button
		for (const button of buttons) {
			// Find the icon and text within the button
			const icon = button.querySelector(`img[class*='icon'i]`);
			const text = button.querySelector(`span[class*='buttontext'i]`).innerText;

			// If the icon exists
			if (icon) {
				// Get the icon's source
				const src = icon.getAttribute('src');
				// Iterate over SVGs object keys
				for (const linkPart in SVGs) {
					// If the source contains the current SVG key
					if (src.includes(linkPart)) {
						// Replace the button's HTML with SVG icon and text
						const svg = `
					<div class="entrance-icon">
						<div>
							<svg viewBox="0 0 200 200" fill="none" class="border-visuals"><circle cx="100" cy="100" r="96"/></svg>
							${SVGs[linkPart]}
						</div>
						<span>${text}</span>
					</div>
					`;
						button.innerHTML = svg;

						break;
					}
				}
			}
		}
	}

	/**
	 * Function to replace static image icons from the registration screen to dynamic SVGs (small circles, bottom-right)
	*/
	function replaceRegistrationIcons() {
		// Select all buttons
		const buttons = document.querySelectorAll('.HeaderComponentStyle-headerLinkBar .SocialNetworksComponentStyle-container > div');

		// Iterate over each button
		for (const button of buttons) {
			// Find the icon
			const icon = button.querySelector(`img[class*='icon'i]`);

			// If the icon exists
			if (icon) {
				// Get the icon's source
				const src = icon.getAttribute('src');
				// Iterate over SVGs object keys
				for (const linkPart in SVGs) {
					// If the source contains the current SVG key
					if (src.includes(linkPart)) {
						// Replace the button's HTML with SVG icon and text
						const svg = `
					<div class="entrance-icon">
						<div>
							<svg viewBox="0 0 200 200" fill="none" class="border-visuals"><circle cx="100" cy="100" r="96"/></svg>
							${SVGs[linkPart]}
						</div>
					</div>
					`;
						button.innerHTML = svg;

						break;
					}
				}
			}
		}
	}

	/**
	 * Create a new instance of MutationObserver with a callback function
	 * to observe changes in the DOM 
	*/
	const observer = new MutationObserver(function (mutations) {
		mutations.forEach(function (mutation) {
			if (mutation.type === 'childList') { // If the change is of type childList
				mutation.addedNodes.forEach(function (node) { // Iterate through added nodes
					if (node.nodeType === Node.ELEMENT_NODE) { // If it's an element node
						// Find an element with the selector '.MainEntranceComponentStyle-container > div' in the added node
						const entrance = node.querySelector(`.MainEntranceComponentStyle-container > div`);
						if (entrance) { // If found
							replaceEntranceIcons();
						}
						// Find an element with the selector '.HeaderComponentStyle-headerLinkBar .SocialNetworksComponentStyle-container > div' in the added node
						const registration = node.querySelector('.HeaderComponentStyle-headerLinkBar .SocialNetworksComponentStyle-container > div')
						if (registration) { // If found
							replaceRegistrationIcons();
						}
					}
				});
			}
		});
	});

	// Configuration for the mutation observer
	const observerConfig = { childList: true, subtree: true };

	// Start observing mutations in the document body
	observer.observe(document.body, observerConfig);
})();
(function () {
	/**
	 * Changes the entrance links icon to a new SVG icon and adds a mouseenter event listener to it
	*/
	function changeEntranceLinksIcon() {
		// Find the icon element
		const icon = document.querySelector(`.HeaderComponentStyle-enableIconLinksComponentShowed`);

		// Define the new SVG icon markup
		const newIcon = `<svg class="link-rects" viewBox="0 0 30 30" xmlns="http://www.w3.org/2000/svg"><rect x="0" y="0" width="8" height="8" rx="1"/><rect x="11" y="0" width="8" height="8" rx="1"/><rect x="22" y="0" width="8" height="8" rx="1"/><rect x="0" y="11" width="8" height="8" rx="1"/><rect x="11" y="11" width="8" height="8" rx="1"/><rect x="22" y="11" width="8" height="8" rx="1"/><rect x="0" y="22" width="8" height="8" rx="1"/><rect x="11" y="22" width="8" height="8" rx="1"/><rect x="22" y="22" width="8" height="8" rx="1"/></svg>`;

		// Set the new SVG icon as innerHTML of the icon element
		icon.innerHTML = newIcon;

		// Add mouseenter event listener to the .link-rects SVG elements
		document.querySelector(".link-rects").addEventListener("mouseenter", function () {
			fill = this.getAttribute('fill');

			var rects = this.querySelectorAll("rect");

			var lastIndex;

			var interval = setInterval(function () {
				// Random next index
				var index
				do {
					index = randomInt(0, rects.length);
				} while (lastIndex === index); // Cannot be the same as previous

				lastIndex = index;

				// Set the color for selected random rectangle
				for (var j = 0; j < rects.length; j++) {
					if (j === index) {
						rects[j].setAttribute("fill", "var(--theme-main-color)");
					} else {
						rects[j].setAttribute("fill", fill);
					}
				}
			}, 250);

			// Add mouseleave event listener to revert changes on mouse leave
			this.addEventListener("mouseleave", function () {
				clearInterval(interval);
				for (var j = 0; j < rects.length; j++) {
					rects[j].setAttribute("fill", fill);
				}
			});
		});
	}

	/**
	 * Generates a random integer between min and max
	 * @param {number} min - The minimum value
	 * @param {number} max - The maximum value
	 * @returns {number} - A random integer number
	*/
	function randomInt(min, max) {
		return Math.floor((Math.random() * max) + min);
	}

	/**
	 * Creates a new instance of MutationObserver to observe changes in the DOM
	*/
	const observer = new MutationObserver(function (mutations) {
		mutations.forEach(function (mutation) {
			if (mutation.type === 'childList') { // If the change is of type childList
				mutation.addedNodes.forEach(function (node) { // Iterate through added nodes
					if (node.nodeType === Node.ELEMENT_NODE) { // If it's an element node
						// Find an element with the needed selector in the added node
						const icon = node.querySelector(`.HeaderComponentStyle-enableIconLinksComponentShowed`);
						if (icon) { // If found
							changeEntranceLinksIcon();
						}
					}
				});
			}
		});
	});

	// Configuration for the mutation observer
	const observerConfig = { childList: true, subtree: true };

	// Start observing mutations in the document body
	observer.observe(document.body, observerConfig);
})();
(function () {
	// Represents a collection of stars and their properties
	let stars = {};
	// Represents the index of the stars collection
	let index = 0;
	// Represents the count of stars currently present
	let count = 0;
	// Represents the acceleration factor for star movement
	let acceleration = 0.5;

	/**
	 * A star in the animated background
	 * 
	 * @param {HTMLElement} canvas - The canvas element to draw the star on
	*/
	class Star {
		constructor(canvas) {
			// Use the global canvas
			this.canvas = canvas;

			// Initial position and velocity of the star
			// By the start X & Y are the center of the canvas
			this.X = this.canvas.width / 2;
			this.Y = this.canvas.height / 2;
			// Random factor to set the star on canvas
			this.SX = Math.random() * 10 - 5;
			this.SY = Math.random() * 10 - 5;

			// Adjust position based on canvas dimensions
			const start = this.canvas.width > this.canvas.height ? this.canvas.width : this.canvas.height;
			// X & Y are changed to meet the random position
			this.X += (this.SX * start) / 10;
			this.Y += (this.SY * start) / 10;

			// Assign an ID to the star
			index++;
			stars[index] = this;
			this.ID = index;

			// Choose random color for the star
			const colors = ['#ffffff', '#fec777', '#498fb3', '#77fee1', '#fa8072'];
			this.C = colors[Math.floor(Math.random() * colors.length)];

			// Define the shape of the star (just a path from svg)
			this.path = new Path2D('M10.744,5.372C7.777,5.372,5.372,2.967,5.372,0c0,2.967-2.405,5.372-5.372,5.372c2.967,0,5.372,2.405,5.372,5.372 C5.372,7.777,7.777,5.372,10.744,5.372z');

			// Random scale for the star
			this.scale = randomNum(.25, .75, 2);
		}

		/**
		 * Draws the star on the canvas.
		*/
		draw() {
			if (!this.canvas) return;

			// Update position based on velocity
			this.X += this.SX;
			this.Y += this.SY;

			// Update velocity with acceleration
			this.SX += this.SX / (50 / acceleration);
			this.SY += this.SY / (50 / acceleration);

			// Check if star is out of bounds
			if (
				this.X < 0 - this.scale * 10 ||
				this.X > this.canvas.width ||
				this.Y < 0 - this.scale * 10 ||
				this.Y > this.canvas.height
			) {
				delete stars[this.ID];
				count--;
			}

			// Get canvas 2D context to draw the star
			let ctx = this.canvas.getContext('2d');

			// Save the canvas position, scale, etc.
			ctx.save();

			// Translate, scale, stroke, and fill the star path
			ctx.fillStyle = this.C;
			ctx.translate(this.X, this.Y);
			ctx.scale(this.scale, this.scale);
			ctx.stroke(this.path);
			ctx.fill(this.path);

			// Restore the canvas
			ctx.restore();
		}
	}

	/**
	 * Initializes the animated background with stars
	 * 
	 * @param {HTMLElement} backgroundElement - The element to append the canvas to
	*/
	function animatedBackground(backgroundElement) {
		if (!backgroundElement) return;

		let canvas;

		// Create canvas element
		canvas = document.createElement('canvas');
		canvas.className = 'star-canvas';

		// Create container to store the canvas
		const canvasContainer = document.createElement('div');
		canvasContainer.className = 'star-canvas-container';

		// Place the container into the parent element and the canvas into the container
		backgroundElement.appendChild(canvasContainer);
		canvasContainer.appendChild(canvas);

		// Fill the canvas background
		canvas.getContext('2d').fillStyle = 'rgba(0, 0, 0, .8)';
		canvas.getContext('2d').fillRect(0, 0, canvas.width, canvas.height);

		// Set canvas dimensions
		canvas.width = backgroundElement.clientWidth;
		canvas.height = backgroundElement.clientHeight;

		// Calculate number of stars to draw
		let starsToDraw = (canvas.width * canvas.height) / 5000;

		/**
		 * Function to draw stars on canvas.
		*/
		function draw() {
			if (!canvas) {
				clearInterval(interval);
				return;
			}

			if (!canvas.getContext) {
				clearInterval(interval);
				return;
			}

			// Resize canvas if needed
			if (canvas.width !== backgroundElement.clientWidth) {
				canvas.width = backgroundElement.clientWidth;
			}
			if (canvas.height !== backgroundElement.clientHeight) {
				canvas.height = backgroundElement.clientHeight;
			}

			// Fill the canvas every frame
			canvas.getContext('2d').fillStyle = 'rgba(0, 0, 0, .8)';
			canvas.getContext('2d').fillRect(0, 0, canvas.width, canvas.height);

			// Add new stars and draw existing stars
			for (let i = count; i < starsToDraw; i++) {
				new Star(canvas);
				count++;
			}

			for (const star in stars) {
				stars[star].draw();
			}
		}

		// Interval to repeat the function
		const interval = setInterval(draw, 20);

		// Storing interval and canvas selector
		backgroundElement.dataset.interval = interval;
		backgroundElement.dataset.canvasClass = canvas.className;
	}

	/**
	 * Removes the animated background canvas from the DOM
	 * 
	 * @param {HTMLElement} backgroundElement - The element containing the canvas
	*/
	function animatedBackgroundDelete(backgroundElement) {
		if (!backgroundElement) return;

		// Get stored values
		const interval = backgroundElement.dataset.interval;
		const canvasClass = backgroundElement.dataset.canvasClass;

		// Clear interval and remove canvas element
		clearInterval(interval);

		if (canvasClass) {
			const canvas = document.querySelector(canvasClass);
			if (canvas) {
				canvas.parentNode.remove();
			}
		}

		delete backgroundElement.dataset.interval;
		delete backgroundElement.dataset.canvasClass;
	}

	/**
	 * Replaces the original progress bar with a custom one
	 * 
	 * @param {HTMLElement} element - The original progress bar element
	*/
	function replaceOriginalProgress(element) {
		// New progress div
		const newProgress = document.createElement('div');
		// Inner of the new progress
		const progressInner = document.createElement('div');
		// Set the class of the new progrss
		newProgress.className = 'custom-progress';
		// Set the bottom position (to replace the old one)
		newProgress.style.bottom = element.style.bottom;
		// Append the inner to the new progrss
		newProgress.appendChild(progressInner);

		// Replace original progress element with the custom one
		element.replaceWith(newProgress);
	}

	/**
	 * Generates a random number between min and max
	 * @param {number} min - The minimum value
	 * @param {number} max - The maximum value
	 * @param {number} precision - The number of digits after the point
	 * @returns {number} - A random number
	*/
	function randomNum(min, max, precision) {
		return Math.max((Math.random() * max), min).toFixed(precision);
	}

	/**
	 * Create a new instance of MutationObserver with a callback function
	 * to observe changes in the DOM 
	*/
	const observer = new MutationObserver(function (mutations) {
		mutations.forEach(function (mutation) {
			if (mutation.type === 'childList' && mutation.addedNodes.length > 0) { // If the change is of type childList
				mutation.addedNodes.forEach(function (node) { // Iterate through added nodes
					if (node.nodeType === Node.ELEMENT_NODE) { // If it's an element node
						// Find an element with the needed selector in the added node
						const check = node.classList.contains('ApplicationLoaderComponentStyle-container') || node.classList.contains('LobbyLoaderComponentStyle-container');
						if (check) { // If found
							animatedBackground(node);
						}

						// Find a progress element
						const progress = document.querySelector('.ApplicationLoaderComponentStyle-loader, .progress, .LobbyLoaderComponentStyle-loaderContainer img, #preloader .progress');
						if (progress) { // If found
							replaceOriginalProgress(progress);
						}
					}
				});
			} else if (mutation.type === 'childList' && mutation.removedNodes.length > 0) {
				mutation.removedNodes.forEach(function (node) { // Iterate through removed nodes
					if (node.nodeType === Node.ELEMENT_NODE) { // If it's an element node
						// Find an element with the needed selector in the added node
						const check = node.classList.contains('ApplicationLoaderComponentStyle-container') || node.classList.contains('LobbyLoaderComponentStyle-container');
						if (check) { // If found
							animatedBackgroundDelete(node);
						}
					}
				});
			}
		});
	});

	// Configuration for the mutation observer
	const observerConfig = { childList: true, subtree: true };

	// Start observing mutations in the document body
	observer.observe(document.body, observerConfig);

	// Check a progress element immediately after the page loads
	const progress = document.querySelector('.ApplicationLoaderComponentStyle-loader, .progress, .LobbyLoaderComponentStyle-loaderContainer img, #preloader .progress');
	if (progress) {
		replaceOriginalProgress(progress);
	}
})();
(function () {
	/**
	 * Function to replace notification images with SVG elements
	 * 
	 * @param {HTMLElement} element - The element to be replaced
	*/
	function replaceNotificationImg(element) {
		// Get computed styles of the element
		var initStyles = window.getComputedStyle(element);

		// Create a new SVG element
		var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
		svg.setAttribute('fill', 'none');
		svg.setAttribute('viewBox', '0 0 30 30');

		// Get specific styles of the original element
		var position = initStyles.getPropertyValue('position');
		var display = initStyles.getPropertyValue('display');
		var height = initStyles.getPropertyValue('height');
		var width = initStyles.getPropertyValue('width');
		var right = initStyles.getPropertyValue('right');
		var top = initStyles.getPropertyValue('top');
		var left = initStyles.getPropertyValue('left');
		var bottom = initStyles.getPropertyValue('bottom');
		var marginRight = initStyles.getPropertyValue('margin-right');
		var marginLeft = initStyles.getPropertyValue('margin-left');
		var marginTop = initStyles.getPropertyValue('margin-top');
		var marginBottom = initStyles.getPropertyValue('margin-bottom');

		// Set styles for the SVG element
		svg.style.setProperty('position', position);
		svg.style.setProperty('display', display);
		svg.style.setProperty('height', height);
		svg.style.setProperty('width', width);
		svg.style.setProperty('right', right);
		svg.style.setProperty('top', top);
		svg.style.setProperty('left', left);
		svg.style.setProperty('bottom', bottom);
		svg.style.setProperty('margin-right', marginRight);
		svg.style.setProperty('margin-left', marginLeft);
		svg.style.setProperty('margin-top', marginTop);
		svg.style.setProperty('margin-bottom', marginBottom);

		// Add SVG inner content
		svg.innerHTML = `
		<circle cx="15" cy="15" r="8" fill="var(--theme-main-color)"/>
		<circle cx="15" cy="15" r="11.5" stroke="var(--theme-main-color)" stroke-opacity="0.25" stroke-width="7"/>
	`;

		// Replace the original element with the SVG
		element.parentNode.replaceChild(svg, element);
	}

	/**
	 * Create a new instance of MutationObserver with a callback function
	 * to observe changes in the DOM 
	*/
	const observer = new MutationObserver(function (mutations) {
		mutations.forEach(function (mutation) {
			if (mutation.type === 'childList') { // If the change is of type childList
				mutation.addedNodes.forEach(function (node) { // Iterate through added nodes
					if (node.nodeType === Node.ELEMENT_NODE) { // If it's an element node
						// Find an element with the selector in the added node
						const iconImg = node.querySelector(`img[class*='notification'i][src*='ellipse'i], img[class*='new'i][src*='ellipse'i]`);
						if (iconImg) { // If found
							// Get all elements with the class 'img[class*='notification'i][src*='ellipse'i]'
							const iconsImg = document.querySelectorAll(`img[class*='notification'i][src*='ellipse'i], img[class*='new'i][src*='ellipse'i]`);
							for (const target of iconsImg) { // Iterate through found elements
								replaceNotificationImg(target); // Apply styles to each element
							}
						}
					}
				});
			}
		});
	});

	// Configuration for the mutation observer
	const observerConfig = { childList: true, subtree: true };

	// Start observing mutations in the document body
	observer.observe(document.body, observerConfig);
})();
(function () {
	/**
	 * Applies styles to an element based on its background image
	 * 
	 * @param {HTMLElement} element - The element to apply styles to
	*/
	function applyStylesToElement(element) {
		const newDiv = document.createElement('div');
		const prevDiv = element.querySelector('div:first-child');

		// Iterate over each class in the classList
		for (let className of element.classList) {
			// Check if the background image contains substrings 'friends', 'news', 'clan', or 'chat'
			if (className.includes('friend')) {
				newDiv.style.maskImage = `url('data:image/svg+xml,<%3Fxml version="1.0" encoding="UTF-8"%3F><svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="30" height="32"><path d="M0 0 C1.010625 0.0825 2.02125 0.165 3.0625 0.25 C5.0625 3.25 5.0625 3.25 4.8125 5.8125 C4.0625 8.25 4.0625 8.25 2.0625 10.25 C-1.23464793 9.92028521 -2.5601839 9.6273161 -4.9375 7.25 C-4.23447766 0.36038108 -4.23447766 0.36038108 0 0 Z " transform="translate(24.9375,16.75)"/><path d="M0 0 C3.0625 0.1875 3.0625 0.1875 5.0625 2.1875 C5.43046448 5.05762296 5.43759409 6.59524618 3.875 9.0625 C2.0625 10.1875 2.0625 10.1875 -0.5 10 C-2.9375 9.1875 -2.9375 9.1875 -4.9375 7.1875 C-4.23164336 0.2701049 -4.23164336 0.2701049 0 0 Z " transform="translate(4.9375,16.8125)"/><path d="M0 0 C2.4375 0.8125 2.4375 0.8125 4.4375 2.8125 C3.86931818 8.38068182 3.86931818 8.38068182 2.4375 9.8125 C-0.5 10 -0.5 10 -3.5625 9.8125 C-5.5625 7.8125 -5.5625 7.8125 -5.875 5.375 C-5.5625 2.8125 -5.5625 2.8125 -4.375 0.9375 C-2.5625 -0.1875 -2.5625 -0.1875 0 0 Z " transform="translate(25.5625,5.1875)"/><path d="M0 0 C3.29714793 0.32971479 4.6226839 0.6226839 7 3 C6.43181818 8.56818182 6.43181818 8.56818182 5 10 C2.0625 10.25 2.0625 10.25 -1 10 C-3 7 -3 7 -2.75 4.4375 C-2 2 -2 2 0 0 Z " transform="translate(3,5)"/><path d="M0 0 C3 0.25 3 0.25 5 2.25 C5.25 4.75 5.25 4.75 5 7.25 C3 9.25 3 9.25 0 9.5 C-3 9.25 -3 9.25 -5 7.25 C-5.25 4.75 -5.25 4.75 -5 2.25 C-3 0.25 -3 0.25 0 0 Z " transform="translate(15,22.75)"/><path d="M0 0 C3 0.25 3 0.25 5 2.25 C5.25 4.75 5.25 4.75 5 7.25 C3 9.25 3 9.25 0 9.5 C-3 9.25 -3 9.25 -5 7.25 C-5.25 4.75 -5.25 4.75 -5 2.25 C-3 0.25 -3 0.25 0 0 Z " transform="translate(15,-0.25)"/></svg>')`;
			} else if (className.includes('news')) {
				newDiv.style.maskImage = `url('data:image/svg+xml,<%3Fxml version="1.0" encoding="UTF-8"%3F><svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="28" height="32"><path d="M0 0 C9.24 0 18.48 0 28 0 C28 8.25 28 16.5 28 25 C26.35 25.66 24.7 26.32 23 27 C22.01 29.475 22.01 29.475 21 32 C14.07 32 7.14 32 0 32 C0 21.44 0 10.88 0 0 Z M7 6 C7 7.32 7 8.64 7 10 C11.62 10 16.24 10 21 10 C21 8.68 21 7.36 21 6 C16.38 6 11.76 6 7 6 Z M7 12 C7 13.32 7 14.64 7 16 C11.62 16 16.24 16 21 16 C21 14.68 21 13.36 21 12 C16.38 12 11.76 12 7 12 Z M7 18 C7 19.32 7 20.64 7 22 C8.98 22 10.96 22 13 22 C13 20.68 13 19.36 13 18 C11.02 18 9.04 18 7 18 Z " transform="translate(0,0)"/></svg>')`;
			} else if (className.includes('clan')) {
				newDiv.style.maskImage = `url('data:image/svg+xml,<%3Fxml version="1.0" encoding="UTF-8"%3F><svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="28" height="32"><path d="M0 0 C9.24 0 18.48 0 28 0 C28 10.56 28 21.12 28 32 C24.04439671 30.02219835 20.82377081 27.7063723 17.31640625 25.046875 C15.0158216 23.7183777 15.0158216 23.7183777 12.4765625 24.6328125 C10.05620793 25.96897038 7.96863484 27.39842394 5.8125 29.125 C2.215311 32 2.215311 32 0 32 C0 21.44 0 10.88 0 0 Z M13 4 C12.67 5.65 12.34 7.3 12 9 C10.02 9 8.04 9 6 9 C6.680625 9.721875 7.36125 10.44375 8.0625 11.1875 C10 14 10 14 9.75 16.8125 C9.5025 17.534375 9.255 18.25625 9 19 C10.36125 18.443125 10.36125 18.443125 11.75 17.875 C15 17 15 17 17.375 17.875 C17.91125 18.24625 18.4475 18.6175 19 19 C18.7525 18.0925 18.505 17.185 18.25 16.25 C18 13 18 13 19.9375 10.625 C20.618125 10.08875 21.29875 9.5525 22 9 C19.03 8.505 19.03 8.505 16 8 C15.67 6.68 15.34 5.36 15 4 C14.34 4 13.68 4 13 4 Z " transform="translate(0,0)"/></svg>')`;
			} else if (className.includes('chat')) {
				newDiv.style.maskImage = `url('data:image/svg+xml,<%3Fxml version="1.0" encoding="UTF-8"%3F><svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32"><path d="M0 0 C0.66209473 -0.00095673 1.32418945 -0.00191345 2.00634766 -0.00289917 C3.40852961 -0.00358076 4.8107147 -0.00172792 6.21289062 0.00244141 C8.36595713 0.00779004 10.51881502 0.0024958 12.671875 -0.00390625 C14.03125046 -0.00324546 15.3906258 -0.00196429 16.75 0 C18.61785156 0.00169189 18.61785156 0.00169189 20.5234375 0.00341797 C23.375 0.1328125 23.375 0.1328125 24.375 1.1328125 C24.4741657 2.75538794 24.50579777 4.38221081 24.5078125 6.0078125 C24.50974609 7.48507812 24.50974609 7.48507812 24.51171875 8.9921875 C24.50785156 10.02859375 24.50398438 11.065 24.5 12.1328125 C24.50580078 13.68742188 24.50580078 13.68742188 24.51171875 15.2734375 C24.51042969 16.25828125 24.50914063 17.243125 24.5078125 18.2578125 C24.50668457 19.16789062 24.50555664 20.07796875 24.50439453 21.015625 C24.375 23.1328125 24.375 23.1328125 23.375 24.1328125 C21.66698664 24.18600323 19.95853063 24.22522472 18.25 24.2578125 C13.66768617 24.5979061 11.45404796 25.37778784 8.25 28.6953125 C7.28852045 29.83850709 6.32921808 30.98354984 5.375 32.1328125 C5.045 32.1328125 4.715 32.1328125 4.375 32.1328125 C4.375 29.4928125 4.375 26.8528125 4.375 24.1328125 C3.59253906 24.14441406 2.81007813 24.15601562 2.00390625 24.16796875 C0.99199219 24.17699219 -0.01992187 24.18601562 -1.0625 24.1953125 C-2.07183594 24.20691406 -3.08117187 24.21851562 -4.12109375 24.23046875 C-6.625 24.1328125 -6.625 24.1328125 -7.625 23.1328125 C-7.7241657 21.51023706 -7.75579777 19.88341419 -7.7578125 18.2578125 C-7.75910156 17.27296875 -7.76039063 16.288125 -7.76171875 15.2734375 C-7.75785156 14.23703125 -7.75398437 13.200625 -7.75 12.1328125 C-7.75580078 10.57820312 -7.75580078 10.57820312 -7.76171875 8.9921875 C-7.76042969 8.00734375 -7.75914062 7.0225 -7.7578125 6.0078125 C-7.75668457 5.09773437 -7.75555664 4.18765625 -7.75439453 3.25 C-7.47430191 -1.33294948 -3.81114892 0.00345213 0 0 Z M-1.625 10.1328125 C-1.625 11.4528125 -1.625 12.7728125 -1.625 14.1328125 C-0.305 14.1328125 1.015 14.1328125 2.375 14.1328125 C2.375 12.8128125 2.375 11.4928125 2.375 10.1328125 C1.055 10.1328125 -0.265 10.1328125 -1.625 10.1328125 Z M6.375 10.1328125 C6.375 11.4528125 6.375 12.7728125 6.375 14.1328125 C7.695 14.1328125 9.015 14.1328125 10.375 14.1328125 C10.375 12.8128125 10.375 11.4928125 10.375 10.1328125 C9.055 10.1328125 7.735 10.1328125 6.375 10.1328125 Z M14.375 10.1328125 C14.375 11.4528125 14.375 12.7728125 14.375 14.1328125 C15.695 14.1328125 17.015 14.1328125 18.375 14.1328125 C18.375 12.8128125 18.375 11.4928125 18.375 10.1328125 C17.055 10.1328125 15.735 10.1328125 14.375 10.1328125 Z " transform="translate(7.625,-0.1328125)"/></svg>')`;
			}
		}

		prevDiv.replaceWith(newDiv);
	}

	/**
	 * Create a new instance of MutationObserver with a callback function
	 * to observe changes in the DOM 
	*/
	const observer = new MutationObserver(function (mutations) {
		mutations.forEach(function (mutation) {
			if (mutation.type === 'childList') { // If the change is of type childList
				mutation.addedNodes.forEach(function (node) { // Iterate through added nodes
					if (node.nodeType === Node.ELEMENT_NODE) { // If it's an element node
						// Find an element with the class '.FooterComponentStyle-footer ul > li' in the added node
						const icon = node.querySelector('.FooterComponentStyle-footer ul > li');
						if (icon) { // If found
							// Get all elements with the class '.FooterComponentStyle-footer ul > li'
							const icons = document.querySelectorAll('.FooterComponentStyle-footer ul > li');
							for (const target of icons) { // Iterate through found elements
								applyStylesToElement(target); // Apply styles to each element
							}
						}
					}
				});
			}
		});
	});

	// Configuration for the mutation observer
	const observerConfig = { childList: true, subtree: true };

	// Start observing mutations in the document body
	observer.observe(document.body, observerConfig);
})();
// Script is unused, it is shown just as example

// Uses _imageToBase64 function from _additional folder

// Image URL
const url = '';

imageToBase64(url, function(base64Image) {
	// Define CSS
	const CSS = `.MainScreenComponentStyle-playButtonContainer{background:url('${base64Image}')}`;

	// Create a <style> element
	var styleElement = document.createElement('style');

	// Set the CSS text to your styles
	styleElement.textContent = CSS;

	// Apply styles to body (to override initial styles)
	document.body.appendChild(styleElement);
});
(function () {
	/**
	 * Generates a random number within a specified range with a maximum difference from the previous value
	 * 
	 * @param {number} min - The minimum value of the range
	 * @param {number} max - The maximum value of the range
	 * @param {number} prev - The previous value for comparison
	 * @param {number} maxDifference - The maximum allowed difference between the new and previous values
	 * @returns {number} - The generated random number
	*/
	function getRandomInRange(min, max, prev, maxDifference) {
		let val;
		do {
			val = Math.floor(Math.random() * (max - min + 1)) + min;
		} while (Math.abs(val - prev) > maxDifference);
		return val;
	}

	/**
	 * Applies background animation to the specified element
	 * 
	 * @param {HTMLElement} disabledButton - The element to which the animation will be applied
	*/
	function applyAnimation(disabledButton) {
		let prevX = parseInt(disabledButton.dataset.prevX) || 10; // Previous value of X
		let prevY = parseInt(disabledButton.dataset.prevY) || 25; // Previous value of Y

		const intervalId = setInterval(function () {
			const randomX = getRandomInRange(0, 100, prevX, 35); // Random value between 0 and 100 for X
			const randomY = getRandomInRange(0, 100, prevY, 35); // Random value between 0 and 100 for Y
			disabledButton.style.transition = "background-position 0.75s ease"; // Apply smooth animation
			disabledButton.style.backgroundPosition = `${randomX}% ${randomY}%`; // Set new background position
			disabledButton.dataset.prevX = randomX; // Update previous value of X in dataset
			disabledButton.dataset.prevY = randomY; // Update previous value of Y in dataset
		}, 750); // Update position every 0.75 seconds

		// Save interval identifier in the element's dataset
		disabledButton.dataset.animationIntervalId = intervalId;
	}

	/**
	 * Stops the background animation of the specified element
	 * 
	 * @param {HTMLElement} disabledButton - The element from which the animation will be stopped
	*/
	function stopAnimation(disabledButton) {
		// Get the interval identifier from the element's dataset
		const intervalId = disabledButton.dataset.animationIntervalId;
		if (intervalId) {
			// If the interval exists, clear it
			clearInterval(intervalId);
			// Remove dataset attribute from the element
			delete disabledButton.dataset.animationIntervalId;
			// Assign the last background position to the parent element MainScreenComponentStyle-playButtonContainer
			const playButton = document.querySelector('.MainScreenComponentStyle-playButtonContainer');
			if (playButton) {
				// Set the background position of the parent container
				playButton.style.backgroundPosition = `${disabledButton.dataset.prevX}% ${disabledButton.dataset.prevY}%`;
			}
		}
	}

	// Create a new instance of MutationObserver
	const observer = new MutationObserver(function (mutationsList, observer) {
		// Iterate through all mutations
		for (const mutation of mutationsList) {
			// Check if the mutation is an attribute change
			if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
				// Check if the element is a .MainScreenComponentStyle-playButtonContainer
				const target = mutation.target;
				if (target.classList.contains('MainScreenComponentStyle-playButtonContainer')) {
					// Check if the .MainScreenComponentStyle-disabledButtonPlay class is added
					if (target.classList.contains('MainScreenComponentStyle-disabledButtonPlay')) {
						// If yes, apply animation to the element
						applyAnimation(target);
					} else {
						// If the .MainScreenComponentStyle-disabledButtonPlay class is removed, stop the animation
						stopAnimation(target);
						// Leave the background position as it is
					}
				}
			}
		}
	});

	// Set up observation for changes in the document
	observer.observe(document.body, { attributes: true, subtree: true });
})();
// UNUSED


(function() {
	/**
	 * Customizes the appearance of the battle tab based on its content
	*/

	function customizeBattleTab() {
		// Get the target element
		var target = document.querySelector('.BattleTabStatisticComponentStyle-container > div');
		// Define selectors for team and solo battle containers
		var teamsSelector = '.BattleTabStatisticComponentStyle-blueTeamTableContainer';
		var soloSelector = '.BattleTabStatisticComponentStyle-dmTableContainer';

		// Check if the target element contains team battle container
		if (target.querySelector(teamsSelector) !== null) {
			// Add class for customized team tab
			target.classList.add('TeamTab');
		}
		// Check if the target element contains solo battle container
		else if (target.querySelector(soloSelector) !== null) {
			// Add class for customized solo tab
			target.classList.add('SoloTab');
		}
	}

	/**
	 * Checks for the existence of the battle tab periodically and customizes it when found
	 * Uses requestAnimationFrame for efficient animation handling
	*/

	function checkForBattleTab() {
		// Get the battle tab element
		var battleTab = document.querySelector('.BattleTabStatisticComponentStyle-container');
		// If battle tab exists, customize it
		if (battleTab) {
			customizeBattleTab();
		}
		
		// If battle tab doesn't exist, continue checking recursively
		requestAnimationFrame(checkForBattleTab);
	}

	// Initial invocation to start checking for the battle tab
	checkForBattleTab();
})();
(function () {
	// Array for turret icon URLs and initial colors
	const turretColorMap = [
		{
			url: 'railgun_resistance',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M14.9091 10.9548L12.4783 9.73937L10.7234 11.7449L9 6.00024L22.5528 12.7766C23.2177 13.1091 24 12.6256 24 11.8822V2.00024C23.9664 0.889975 23.0548 0.000244141 21.9364 0.000244141C21.3413 0.000244141 20.7752 0.257123 20.3834 0.704956L15.2174 6.60894L8.05481 3.02765C7.27327 2.63688 6.40168 3.36596 6.64824 4.20424L9.33333 13.3336L5.28431 17.961L1.17889 17.2146C0.565046 17.103 0 17.5746 0 18.1985V24.0002L5.30233 19.3607L11.8677 20.6738C12.6075 20.8218 13.2385 20.1285 13.0217 19.4059L11.8163 15.388L10.2771 16.5424L11 19.0002L6.62366 18.2045L14.9091 10.9548ZM4.24468 19.1492L0 24.0002L1 18.5002L4.24468 19.1492ZM18.1818 8.09115L22 10.0002V4.75024L18.1818 8.09115Z" fill="white"/></svg>',
			color: 'rgb(255, 163, 0)'
		},
		{
			url: 'thunder_resistance',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 7.50024L0 9.00024L12 3.00024L3 0.000244141H18C21.3137 0.000244141 24 2.68654 24 6.00024V21.0002L21 12.0002L15 24.0002L16.5 12.0002L0 24.0002L12 7.50024Z" fill="white"/></svg>',
			color: 'rgb(255, 133, 0)'
		},
		{
			url: 'rocket_launcher_resistance',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M24 0H23.4853C21.894 0 20.3679 0.632141 19.2426 1.75736L13.5 7.5H8.74264C7.94699 7.5 7.18393 7.81607 6.62132 8.37868L4.5 10.5L10.5 16.5L22.2426 4.75736C23.3679 3.63214 24 2.10602 24 0.514719V0Z" fill="white"/><path d="M13.5 19.5L12 18L16.5 13.5V15.2574C16.5 16.053 16.1839 16.8161 15.6213 17.3787L13.5 19.5Z" fill="white"/><path d="M6 21L0 24L3 18L0 15L7.5 16.5L9 24L6 21Z" fill="white"/></svg>',
			color: 'rgb(161, 151, 253)'
		},
		{
			url: 'ricochet_resistance',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0 15.9976L5 10.9983L7.41267 21.6609C8.00091 24.2605 11.4346 24.8591 12.8681 22.6119L23.2802 6.28891C23.3452 6.19594 23.4064 6.10008 23.4635 6.00156L23.4651 5.99904C23.8054 5.41081 24 4.72783 24 3.99944C24 1.79061 22.2091 0 20 0C18.3309 0 16.9005 1.02221 16.301 2.47467L10 14.9978L8.25263 8.00928C7.80952 6.23709 5.41757 5.93784 4.5514 7.54622L0 15.9976Z" fill="white"/></svg>',
			color: 'rgb(255, 227, 120)'
		},
		{
			url: 'scorpio_resistance',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M11.225 20.2585L0 24.0002L10.5 18.0002L8.26255 12.4066C7.80286 11.2573 8.09616 9.94377 9.00103 9.09923L17.6649 1.01295C18.3622 0.362139 19.2849 0.000183105 20.2388 0.000183105C22.3098 0.000183105 24 1.67912 24 3.75018C24 5.1351 23.2367 6.40728 22.0147 7.05901L12.75 12.0002L13.2614 17.114C13.4009 18.5093 12.5553 19.8151 11.225 20.2585Z" fill="white"/><path d="M9.08275 4.10374L3.75 9.75019L6.79541 15.2319C7.18829 15.9391 6.94961 16.8304 6.25592 17.2466L0 21.0002L4.5 16.5002L1.06623 11.3495C0.416386 10.3748 0.393413 9.11089 1.00741 8.11314L5.29814 1.14071C5.73431 0.431936 6.50695 0.000183105 7.33918 0.000183105C8.33817 0.000183105 9.23701 0.632223 9.58778 1.56761C9.91397 2.43743 9.7206 3.42837 9.08275 4.10374Z" fill="white"/><path d="M18.75 17.2502L22.9043 15.4698C23.569 15.1849 24 14.5229 24 13.7997C24 12.8128 23.2 12.0002 22.213 12.0002C21.9094 12.0002 21.6107 12.0776 21.3452 12.2251L17.3673 14.435C16.0225 15.1821 15.4608 16.8253 16.0667 18.2393L17.25 21.0002L9 24.0002L18.529 22.7297C19.4361 22.6087 20.0244 21.7107 19.773 20.8307L18.75 17.2502Z" fill="white"/></svg>',
			color: 'rgb(255, 61, 61)'
		},
		{
			url: 'smoky_resistance',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M13.5 4.5L13.7574 4.24264C16.4739 1.52612 20.1583 0 24 0C24 3.84174 22.4739 7.52612 19.7574 10.2426L19.5 10.5L13.5 4.5Z" fill="white"/><path d="M0 16.5L7.5 24L8.08394 23.4161C8.34073 23.1593 8.43812 22.7834 8.33835 22.4342L7.83333 20.6667L9 19.5L10.1464 20.6464C10.3417 20.8417 10.6583 20.8417 10.8536 20.6464L16.9393 14.5607C17.6185 13.8815 18 12.9604 18 12L12 6C11.0396 6 10.1185 6.38153 9.43934 7.06066L3.35355 13.1464C3.15829 13.3417 3.15829 13.6583 3.35355 13.8536L4.5 15L3.33333 16.1667L1.56576 15.6616C1.21657 15.5619 0.840734 15.6593 0.583936 15.9161L0 16.5Z" fill="white"/></svg>',
			color: 'rgb(255, 240, 0)'
		},
		{
			url: 'firebird_resistance',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M4.5 5.99969L10.5 -0.000305176H9C6.51472 -0.000305176 4.5 2.01441 4.5 4.49969V5.99969Z" fill="white"/><path d="M4.50001 8.99994L7.50001 11.9999C7.50001 9.11864 8.6446 6.35535 10.682 4.31796L15 -6.10352e-05V4.49994L20.6628 10.1627C21.8577 11.3576 22.6493 12.896 22.9272 14.5628C23.5535 18.3211 21.4785 22.0085 17.9409 23.4236L16.5 23.9999V21.4705C16.5 18.2879 15.2357 15.2357 12.9853 12.9852L12 11.9999V16.4999L10.1718 17.7187C8.50261 18.8315 7.50001 20.7049 7.50001 22.711V23.9999L6.05915 23.4236C2.52152 22.0085 0.446472 18.3211 1.07286 14.5628C1.35066 12.896 2.14235 11.3576 3.33725 10.1627L4.50001 8.99994Z" fill="white"/></svg>',
			color: 'rgb(255, 51, 0)'
		},
		{
			url: 'freeze_resistance',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M13.744 0.84381L12.0002 3.75013L10.2564 0.84381C9.97555 0.375659 9.3711 0.21932 8.89845 0.492571L8.222 0.883644C7.74152 1.16142 7.57915 1.77733 7.86026 2.25587L10.5003 6.75018V9.40208L8.20366 8.07612L5.63152 3.54268C5.35764 3.05997 4.74306 2.89262 4.26226 3.16984L3.58536 3.56013C3.11239 3.83283 2.94556 4.43447 3.21054 4.91181L4.85559 7.87514L1.46681 7.93215C0.920935 7.94133 0.483314 8.38664 0.483632 8.93259L0.484085 9.71395C0.484408 10.2689 0.936622 10.7175 1.4916 10.7133L6.7036 10.6742L9.00027 12.0001L6.7034 13.3262L1.49137 13.2871C0.93639 13.2829 0.484175 13.7315 0.483853 14.2865L0.483399 15.0678C0.483081 15.6138 0.920702 16.0591 1.46658 16.0683L4.85536 16.1253L3.21031 19.0886C2.94533 19.5659 3.11216 20.1676 3.58513 20.4403L4.26203 20.8306C4.74283 21.1078 5.35741 20.9404 5.63129 20.4577L8.20342 15.9243L10.5003 14.5982V17.2504L7.86026 21.7447C7.57915 22.2232 7.74152 22.8391 8.222 23.1169L8.89845 23.508C9.3711 23.7812 9.97555 23.6249 10.2564 23.1567L12.0002 20.2504L13.744 23.1567C14.0249 23.6249 14.6294 23.7812 15.102 23.508L15.7785 23.1169C16.259 22.8391 16.4213 22.2232 16.1402 21.7447L13.5003 17.2506V14.5982L15.7974 15.9245L18.3694 20.4577C18.6433 20.9404 19.2579 21.1078 19.7387 20.8306L20.4156 20.4403C20.8886 20.1676 21.0554 19.5659 20.7904 19.0886L19.1454 16.1253L22.5342 16.0682C23.08 16.0591 23.5176 15.6138 23.5173 15.0678L23.5169 14.2864C23.5166 13.7315 23.0643 13.2829 22.5094 13.2871L17.2971 13.3262L15.0003 12.0001L17.2969 10.6742L22.5091 10.7134C23.0641 10.7175 23.5163 10.269 23.5166 9.71396L23.5171 8.9326C23.5174 8.38665 23.0798 7.94135 22.5339 7.93216L19.1451 7.87515L20.7902 4.91182C21.0552 4.43448 20.8883 3.83284 20.4154 3.56014L19.7385 3.16985C19.2577 2.89263 18.6431 3.05998 18.3692 3.54269L15.7972 8.07596L13.5003 9.40206V6.75001L16.1402 2.25587C16.4213 1.77733 16.259 1.16142 15.7785 0.883644L15.102 0.492571C14.6294 0.21932 14.0249 0.375659 13.744 0.84381Z" fill="white"/></svg>',
			color: 'rgb(0, 151, 255)'
		},
		{
			url: 'twins_resistance',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M23.5021 8.01802L21.0656 13.5002L19.5656 6.00024L18.0656 18.0002L13.1916 8.25223C11.296 4.46097 14.0528 0.000244141 18.2916 0.000244141C22.4179 0.000244141 25.178 4.24737 23.5021 8.01802Z" fill="white"/><path d="M11.5021 14.018L9.06559 19.5002L7.56559 12.0002L6.06559 24.0002L1.19158 14.2522C-0.704044 10.461 2.05284 6.00024 6.29159 6.00024C10.4179 6.00024 13.178 10.2474 11.5021 14.018Z" fill="white"/></svg>',
			color: 'rgb(0, 255, 0)'
		},
		{
			url: 'hammer_resistance',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0 24L21.2784 10.701C22.9715 9.64283 24 7.78712 24 5.79058C24 2.59253 21.4075 0 18.2094 0H18.0815C16.1502 0 14.3404 0.942292 13.2329 2.52446L4.5 15L18 6L0 24Z" fill="white"/><path d="M2.67035 4.31859L0 15L5.83536 5.66342C6.56002 4.50396 5.72646 3 4.35917 3C3.56038 3 2.86409 3.54365 2.67035 4.31859Z" fill="white"/><path d="M6 24L20.4776 16.7612C22.0959 15.952 24 17.1288 24 18.9382C24 20.128 23.1398 21.1434 21.9662 21.339L6 24Z" fill="white"/></svg>',
			color: 'rgb(200, 200, 200)'
		},
		{
			url: 'tesla_resistance',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M14.9999 12L20.9999 12.0002L6.61214 21.5919C8.2045 22.4882 10.0425 22.9995 12 22.9995C18.0751 22.9995 23 18.0746 23 11.9995C23 8.664 21.5154 5.67524 19.171 3.65795L14.9999 12Z" fill="white"/><path d="M17.3886 2.40755L2.99993 12L8.99993 12L4.82929 20.3413C2.48469 18.324 1 15.3351 1 11.9995C1 5.92438 5.92487 0.999512 12 0.999512C13.9578 0.999512 15.7961 1.51096 17.3886 2.40755Z" fill="white"/></svg>',
			color: 'rgb(0, 215, 255)'
		},
		{
			url: 'isis_resistance',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.5 0C7.94772 0 7.5 0.447716 7.5 1V7.5L1 7.5C0.447715 7.5 0 7.94771 0 8.5V15.5C0 16.0523 0.447715 16.5 1 16.5H7.5V23C7.5 23.5523 7.94772 24 8.5 24H9L12 13L8.5 13.5L12 0H8.5Z" fill="white"/><path d="M15.5 24C16.0523 24 16.5 23.5523 16.5 23V16.5H23C23.5523 16.5 24 16.0523 24 15.5V8.5C24 7.94771 23.5523 7.5 23 7.5L16.5 7.5V1C16.5 0.447715 16.0523 0 15.5 0H15L12 11L15.5 10.5L12 24H15.5Z" fill="white"/></svg>',
			color: 'rgb(0, 187, 67)'
		},
		{
			url: 'gauss_resistance',
			icon: '<svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M22.6994 22.102C24.5334 20.268 24.4119 16.9136 22.7224 13.3196L21.7014 13.5748C22.8496 16.0851 22.9806 18.2905 21.8187 19.4524C19.9902 21.2809 15.577 19.9074 11.4589 16.406L22.4 8.20018C23.4072 7.44477 24 6.25921 24 5.00018C24 2.79104 22.2091 1.00018 20 1.00018C18.741 1.00018 17.5554 1.59296 16.8 2.60018L15.3621 4.51732C10.5318 0.89626 5.35464 -0.151242 2.90044 2.30296C-0.0282748 5.23168 2.02969 12.038 7.49703 17.5054C12.9644 22.9727 19.7707 25.0307 22.6994 22.102ZM14.7631 5.31612C11 2.50647 7.21405 1.53012 5.55526 3.18891C3.72796 5.01621 5.0984 9.42479 8.59468 13.5406L14.7631 5.31612Z" fill="white"/><path d="M0 25.0002L6 20.5002V17.0002L0 25.0002Z" fill="white"/></svg>',
			color: 'rgb(1, 255, 162)'
		},
		{
			url: 'shaft_resistance',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M13.5 0.0928406C13.0086 0.031565 12.508 0 12 0C6.40848 0 1.71018 3.82432 0.378052 9H2.80494C3.22876 9 3.60156 8.73038 3.77393 8.3432C4.98029 5.63353 7.48619 3.63006 10.5 3.12444V7.67157C10.5 8.20201 10.7107 8.71071 11.0858 9.08579L12 10L12.9142 9.08579C13.2893 8.71071 13.5 8.20201 13.5 7.67157V0.0928406Z" fill="white"/><path d="M15.6568 3.77393C18.3665 4.98029 20.3699 7.48619 20.8756 10.5H16.3284C15.798 10.5 15.2893 10.7107 14.9142 11.0858L14 12L14.9142 12.9142C15.2893 13.2893 15.798 13.5 16.3284 13.5H23.9072C23.9684 13.0086 24 12.508 24 12C24 6.40848 20.1757 1.71018 15 0.378052V2.80494C15 3.22876 15.2696 3.60156 15.6568 3.77393Z" fill="white"/><path d="M20.2261 15.6568C20.3984 15.2696 20.7712 15 21.1951 15H23.6219C22.2898 20.1757 17.5915 24 12 24C11.492 24 10.9914 23.9684 10.5 23.9072V16.3284C10.5 15.798 10.7107 15.2893 11.0858 14.9142L12 14L12.9142 14.9142C13.2893 15.2893 13.5 15.798 13.5 16.3284V20.8756C16.5138 20.3699 19.0197 18.3665 20.2261 15.6568Z" fill="white"/><path d="M0.0928406 10.5H7.67157C8.20201 10.5 8.71071 10.7107 9.08579 11.0858L10 12L9.08579 12.9142C8.71071 13.2893 8.20201 13.5 7.67157 13.5H3.12444C3.63006 16.5138 5.63353 19.0197 8.3432 20.2261C8.73038 20.3984 9 20.7712 9 21.1951V23.6219C3.82432 22.2898 0 17.5915 0 12C0 11.492 0.031565 10.9914 0.0928406 10.5Z" fill="white"/></svg>',
			color: 'rgb(255, 59, 58)'
		},
		{
			url: 'artillery_resistance',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0 6L6 16.5L0 19.5H24L18 16.5L24 6L16.5 9V0L12 6L7.5 0V9L0 6Z" fill="white"/><path d="M3 24C8.37265 20.1198 15.6273 20.1198 21 24H3Z" fill="white"/></svg>',
			color: 'rgb(255, 90, 0)'
		},
		{
			url: 'vulcan_resistance',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M15.25 0.876694C13.2389 -0.284419 10.7611 -0.284419 8.75003 0.876694L3.9917 3.62392C1.98059 4.78503 0.741699 6.93086 0.741699 9.25308V14.7475C0.741699 17.0698 1.98059 19.2156 3.9917 20.3767L8.75003 23.1239C10.7611 24.285 13.2389 24.285 15.25 23.1239L20.0084 20.3767C22.0195 19.2156 23.2584 17.0698 23.2584 14.7475V9.25308C23.2584 6.93086 22.0195 4.78503 20.0084 3.62392L15.25 0.876694ZM15 4.50031C15 6.15717 13.6568 7.50031 12 7.50031C10.3433 7.50031 9.00003 6.15717 9.00003 4.50031C9.00003 2.84345 10.3433 1.50031 12 1.50031C13.6568 1.50031 15 2.84345 15 4.50031ZM15 19.5003C15 21.1572 13.6568 22.5003 12 22.5003C10.3433 22.5003 9.00003 21.1572 9.00003 19.5003C9.00003 17.8434 10.3433 16.5003 12 16.5003C13.6568 16.5003 15 17.8434 15 19.5003ZM15.8971 9.75036C16.7256 11.1852 18.5603 11.6769 19.9952 10.8484C21.4301 10.02 21.9217 8.18524 21.0933 6.75036C20.2649 5.31548 18.4301 4.82386 16.9952 5.65228C15.5603 6.48071 15.0687 8.31548 15.8971 9.75036ZM2.90676 17.2504C3.73519 18.6852 5.56996 19.1769 7.00483 18.3484C8.43971 17.52 8.93134 15.6852 8.10291 14.2504C7.27448 12.8155 5.43971 12.3239 4.00483 13.1523C2.56996 13.9807 2.07833 15.8155 2.90676 17.2504ZM7.00484 5.65218C8.43972 6.4806 8.93135 8.31537 8.10292 9.75025C7.27449 11.1851 5.43972 11.6768 4.00484 10.8483C2.56997 10.0199 2.07834 8.18513 2.90677 6.75025C3.73519 5.31537 5.56997 4.82375 7.00484 5.65218ZM19.9952 13.1522C21.4301 13.9806 21.9217 15.8154 21.0933 17.2503C20.2649 18.6851 18.4301 19.1768 16.9952 18.3483C15.5603 17.5199 15.0687 15.6851 15.8971 14.2503C16.7256 12.8154 18.5603 12.3237 19.9952 13.1522Z" fill="white"/></svg>',
			color: 'rgb(159, 159, 159)'
		},
		{
			url: 'crit_resistance',
			icon: '<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M6.25 1L8 0L9.75 1H12L13.0908 2.90918L15 4V6.25L16 8L15 9.75V12L13.0908 13.0908L12 15H9.75L8 16L6.25 15H4L2.90918 13.0908L1 12V9.75L0 8L1 6.25V4L2.90918 2.90918L4 1H6.25ZM7 5.5C7 6.32843 6.32843 7 5.5 7C4.67157 7 4 6.32843 4 5.5C4 4.67157 4.67157 4 5.5 4C6.32843 4 7 4.67157 7 5.5ZM12 10.5C12 11.3284 11.3284 12 10.5 12C9.67157 12 9 11.3284 9 10.5C9 9.67157 9.67157 9 10.5 9C11.3284 9 12 9.67157 12 10.5ZM11.5303 4.46967C11.8232 4.76256 11.8232 5.23744 11.5303 5.53033L5.53033 11.5303C5.23744 11.8232 4.76256 11.8232 4.46967 11.5303C4.17678 11.2374 4.17678 10.7626 4.46967 10.4697L10.4697 4.46967C10.7626 4.17678 11.2374 4.17678 11.5303 4.46967Z" fill="white"/></svg>',
			color: 'rgb(223, 34, 43)'
		},
		{
			url: 'mine_resistance',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g><path d="M12 17.2502C14.8995 17.2502 17.25 14.8997 17.25 12.0002C17.25 9.10069 14.8995 6.75018 12 6.75018C9.1005 6.75018 6.75 9.10069 6.75 12.0002C6.75 14.8997 9.1005 17.2502 12 17.2502Z" fill="white"/><path fill-rule="evenodd" clip-rule="evenodd" d="M6.41421 0.585969C6.78929 0.210896 7.29799 0.000183105 7.82843 0.000183105H16.1716C16.702 0.000183105 17.2107 0.210897 17.5858 0.58597L23.4142 6.4144C23.7893 6.78947 24 7.29818 24 7.82861V16.1718C24 16.7022 23.7893 17.2109 23.4142 17.586L17.5858 23.4144C17.2107 23.7895 16.702 24.0002 16.1716 24.0002H7.82843C7.29799 24.0002 6.78929 23.7895 6.41421 23.4144L0.585786 17.586C0.210713 17.2109 0 16.7022 0 16.1718V7.82861C0 7.29818 0.210714 6.78947 0.585786 6.4144L6.41421 0.585969ZM3 15.7575V8.24282L8.24264 3.00018H15.7574L21 8.24282V15.7575L15.7574 21.0002H8.24264L3 15.7575Z" fill="white"/></g><defs><clipPath><rect width="24" height="24" fill="white"/></clipPath></defs></svg>',
			color: 'rgb(0, 179, 113)'
		},
	];

	const immunityColorMap = [
		{
			url: 'parkour',
			icon: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g><path d="M14.25 17.625C14.25 18.2463 13.7463 18.75 13.125 18.75H10.875C10.2537 18.75 9.75 18.2463 9.75 17.625C9.75 17.0037 10.2537 16.5 10.875 16.5H13.125C13.7463 16.5 14.25 17.0037 14.25 17.625Z" fill="white"/><path fill-rule="evenodd" clip-rule="evenodd" d="M12 24C18.6274 24 24 18.6274 24 12C24 5.37258 18.6274 0 12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24ZM21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12H21ZM6.75 6.00073C7.04263 6.00073 7.32222 6.0566 7.57867 6.15825C7.08729 6.40458 6.75 6.9129 6.75 7.5C6.75 8.32843 7.42157 9 8.25 9H9.71655C9.72764 9.00049 9.73879 9.00073 9.75 9.00073C10.1642 9.00073 10.5 8.66495 10.5 8.25073C10.5 6.17966 8.82107 4.50073 6.75 4.50073C4.67893 4.50073 3 6.17966 3 8.25073C3 8.66495 3.33579 9.00073 3.75 9.00073C4.16421 9.00073 4.5 8.66495 4.5 8.25073C4.5 7.00809 5.50736 6.00073 6.75 6.00073ZM18.0787 6.15825C17.8222 6.0566 17.5426 6.00073 17.25 6.00073C16.0074 6.00073 15 7.00809 15 8.25073C15 8.66495 14.6642 9.00073 14.25 9.00073C13.8358 9.00073 13.5 8.66495 13.5 8.25073C13.5 6.17966 15.1789 4.50073 17.25 4.50073C19.3211 4.50073 21 6.17966 21 8.25073C21 8.66495 20.6642 9.00073 20.25 9.00073C20.2388 9.00073 20.2276 9.00049 20.2166 9H18.75C17.9216 9 17.25 8.32843 17.25 7.5C17.25 6.9129 17.5873 6.40458 18.0787 6.15825Z" fill="white"/></g></svg>',
			color: 'rgb(243, 207, 72)'
		},
	]

	/**
	 * Function to track elements of tab 
	*/
	function trackElements() {
		// Turret elements
		const turrets = document.querySelectorAll('.BattleTabStatisticComponentStyle-deviceCell div');
		// Module elements
		const modules = document.querySelectorAll('.BattleTabStatisticComponentStyle-container div');
		// Hull + immunity elements
		const immunities = document.querySelectorAll('.BattleTabStatisticComponentStyle-defenceCell div');

		for (const turret of turrets) { // For each turret icon
			if (isElementVisible(turret)) { // If it is on the page
				processTurret(turret); // Change CSS
			}
		}

		for (const module of modules) { // For each module icon
			if (isElementVisible(module)) { // If it is on the page
				processModule(module); // Change CSS
			}
		}

		for (const immunity of immunities) { // For each module icon
			if (isElementVisible(immunity)) { // If it is on the page
				processImmunity(immunity); // Change CSS
			}
		}

		// Repeat each frame
		requestAnimationFrame(trackElements);
	}

	/**
	 * Function to check if the element is placed on the page
	 * 
	 * @param {Element} element
	 * @returns {Boolean} if the element is on the page
	*/
	function isElementVisible(element) {
		const rect = element.getBoundingClientRect();
		return (
			rect.top >= 0 &&
			rect.left >= 0 &&
			rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
			rect.right <= (window.innerWidth || document.documentElement.clientWidth)
		);
	}

	/**
	 * Function to change module CSS
	 * 
	 * @param {Element} element 
	*/
	function processModule(element) {
		const computedStyle = getComputedStyle(element);
		const maskImage = computedStyle.maskImage; // Turrets have mask-image

		for (item of turretColorMap) {
			if (maskImage.includes(item.url)) {
				element.style.maskImage = `url('data:image/svg+xml,${item.icon}')`; // Set mask-image
				element.style.maskPosition = 'center center'; // Set mask-position
				element.style.maskRepeat = 'no-repeat'; // Set mask-repeat
				element.style.maskSize = 'contain'; // Set mask-size
				const currentBackgroundColor = computedStyle.backgroundColor;
				if (currentBackgroundColor !== 'rgb(254, 102, 102)') {
					element.style.backgroundColor = item.color;
				} else {
					element.style.backgroundColor = 'var(--theme-main-color)';

					// Find adjacent text nodes
					const adjacentText = element.nextElementSibling;
					if (adjacentText && (adjacentText.tagName === 'H3' || adjacentText.tagName === 'SPAN')) {
						// Change text color
						adjacentText.style.color = 'var(--theme-main-color)';
					}
				}
			}
		}
	}

	/**
	 * Function to change turret CSS
	 * 
	 * @param {Element} element 
	*/
	function processTurret(element) {
		const computedStyle = getComputedStyle(element);
		const backgroundImage = computedStyle.backgroundImage; // Turrets have bacground-image

		for (item of turretColorMap) {
			if (backgroundImage.includes(item.url)) {
				element.style.backgroundImage = 'none'; // Delete background-image
				element.style.backgroundColor = item.color; // Set color
				element.style.maskImage = `url('data:image/svg+xml,${item.icon}')`; // Set mask-image
				element.style.maskPosition = 'center center'; // Set mask-position
				element.style.maskRepeat = 'no-repeat'; // Set mask-repeat
				element.style.maskSize = 'contain'; // Set mask-size
			}
		}
	}

	/**
	 * Function to change immunity CSS
	 * 
	 * @param {Element} element 
	*/
	function processImmunity(element) {
		const computedStyle = getComputedStyle(element);
		const maskImage = computedStyle.backgroundImage; // Immunities have background-image

		for (item of immunityColorMap) {
			if (maskImage.includes(item.url)) {
				element.style.backgroundImage = 'none'; // Delete background-image
				element.style.backgroundColor = item.color; // Set item color
				element.style.maskImage = `url('data:image/svg+xml,${item.icon}')`; // Set mask-image
				element.style.maskPosition = 'center center'; // Set mask-position
				element.style.maskRepeat = 'no-repeat'; // Set mask-repeat
				element.style.maskSize = 'contain'; // Set mask-size
			}
		}
	}

	// Initial call
	trackElements();
})();